# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

#what branch we are watching
trigger:
  - 'master'

pool: 
  vmImage: 'ubuntu-latest'

variables:
- name: 'instructor' 
  value: 'Mark'
- name: 'sdkVersion'
  value: '3.1.x'
- name: 'solutionPath'
  value: 'pipelineMvcDemo'
- name: 'buildConfiguration' 
  value: 'Release'

#watch for PR's
pr: 'none'

#groups sequential actions
stages:
  - stage:
    jobs:
      - job: 'build'
    
        pool: 
          vmImage: 'ubuntu-latest'
        steps:
        #remember, paths are relative to where the YAML file is.
          - script: dotnet build 'pipelineMvcDemo/pipelineMvcDemo.csproj'
          - script: echo "Hey there $(instructor)!"

      - job: test

        pool:
          vmImage: ubuntu-latest

          steps:

          - task: UseDotNet@2
            inputs:
              packageType: sdk
              version: 3.1.x
            displayName: dotnet 3.1.x
          
          - task: SonarCloudPrepare@1
            inputs:
              SonarCloud: 'pipelineDemo'
              organization: '042020-dotnet-uta'
              scannerMode: 'MSBuild'
              projectKey: '042020-dotnet-uta'
          - task: UseDotNet@2
            inputs:
              packageType: sdk
              version: $(sdkVersion)
            displayName: dotnet $(sdkVersion)

          - script: dotnet build
              --configuration $(buildConfiguration)
            workingDirectory: $(solutionPath)
            displayName: dotnet build

          - script: dotnet test
              --configuration $(buildConfiguration)
              --logger trx
              --no-build
              --results-directory $(Common.TestResultsDirectory)
              --settings coverlet.runsettings
            workingDirectory: $(solutionPath)
            continueOnError: true
            displayName: dotnet test

          - task: SonarCloudAnalyze@1
            displayName: sonarcloud analysis run

          - task: PublishTestResults@2
            condition: succeededOrFailed()
            inputs:
              testRunner: VSTest
              testResultsFiles: $(Common.TestResultsDirectory)/*.trx
            displayName: test results build publish

          - task: PublishCodeCoverageResults@1
            condition: succeededOrFailed()
            inputs:
              codeCoverageTool: Cobertura
              summaryFileLocation: $(Common.TestResultsDirectory)/*/coverage.cobertura.xml
            displayName: code coverage build publish

          - task: SonarCloudPublish@1
            condition: succeededOrFailed()
            displayName: sonarcloud results build publish

      - job: 'publish'
        dependsOn: 'test'
        steps:
          - script: 'dotnet publish'

name: '$(date:yyyyMMdd)$(rev:rr)'

        