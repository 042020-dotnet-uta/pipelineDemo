# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

#what branch we are watching
trigger:
  - 'master'

pool: 
  vmImage: 'ubuntu-latest'

variables:
- name: 'instructor' 
  value: 'Mark'
- name: 'sdkVersion'
  value: '3.1.x'
- name: 'solutionPath'
  value: 'pipelineMvcDemo/pipelineMvcDemo.csproj'
- name: 'buildConfiguration' 
  value: 'Release'

#watch for PR's
pr: 'none'

#groups sequential actions
stages:
  - stage: 'build'
    jobs:
      - job: 'buildjob'
    
        pool: 
          vmImage: 'ubuntu-latest'
        
        steps:

        - task: UseDotNet@2
          inputs:
            packageType: sdk
            version: $(sdkVersion)
          displayName: dotnet $(sdkVersion)

        - task: DotNetCoreCLI@2
          inputs:
            command: publish
            publishWebProjects: true
            arguments:
              --configuration $(buildConfiguration)
              --output $(Build.ArtifactStagingDirectory)/app
            modifyOutputPath: false
            zipAfterPublish: true
          displayName: dotnet publish

        - publish: $(Build.ArtifactStagingDirectory)/app
          artifact: app
          displayName: artifact publish app


        #remember, paths are relative to where the YAML file is.
        # - script: dotnet build 'pipelineMvcDemo/pipelineMvcDemo.csproj'
        # - script: echo "Hey there $(instructor)!"

#       - job: test

#         pool:
#           vmImage: ubuntu-latest

#           steps:

#           - task: UseDotNet@2
#             inputs:
#               packageType: sdk
#               version: 3.1.x
#             displayName: dotnet 3.1.x
          

#           - task: SonarCloudPrepare@1
#             inputs:
#               SonarCloud: 'pipelineDemo'
#               organization: '042020-dotnet-uta'
#               scannerMode: 'MSBuild'
#               projectKey: '042020-dotnet-uta'#this name may not matter or it may need to be changed. 
#           - task: UseDotNet@2
#             inputs:
#               packageType: sdk
#               version: $(sdkVersion)
#             displayName: dotnet $(sdkVersion)

# #add the path to the test project whn it's finished.
#           - script: dotnet build
#               --configuration $(buildConfiguration)
#             workingDirectory: $(solutionPath)
#             displayName: dotnet build

# #add the path to the test project whn it's finished.
#           - script: dotnet test
#               --configuration $(buildConfiguration)
#               --logger trx
#               --no-build
#               --results-directory $(Common.TestResultsDirectory)
#               --settings coverlet.runsettings
#             workingDirectory: $(solutionPath)
#             continueOnError: true
#             displayName: dotnet test

#           - task: SonarCloudAnalyze@1
#             displayName: sonarcloud analysis run

#           - task: PublishTestResults@2
#             condition: succeededOrFailed()
#             inputs:
#               testRunner: VSTest
#               testResultsFiles: $(Common.TestResultsDirectory)/*.trx
#             displayName: test results build publish

#           - task: PublishCodeCoverageResults@1
#             condition: succeededOrFailed()
#             inputs:
#               codeCoverageTool: Cobertura
#               summaryFileLocation: $(Common.TestResultsDirectory)/*/coverage.cobertura.xml
#             displayName: code coverage build publish

#           - task: SonarCloudPublish@1
#             condition: succeededOrFailed()
#             displayName: sonarcloud results build publish


  - stage: 'deploy'
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    dependsOn: build

    jobs:

    - deployment: deploy_dev

      pool:
        vmImage: ubuntu-latest

      environment: dev

      strategy:
        runOnce:
          deploy:
            steps:

            - download: current
              artifact: app
              displayName: artifact download app

            #- job: 'publish'
            - task: AzureRmWebAppDeployment@4
              inputs:
                ConnectionType: 'AzureRM'
                azureSubscription: 'Azure subscription 1(5d150957-9944-40b9-b9e9-2a32c983a1f8)'
                appType: 'webApp'
                WebAppName: 'pipelineDemo11'
                deployToSlotOrASE: true
                ResourceGroupName: 'MarkMooreResourceGroup'
                SlotName: 'production'
                packageForLinux: '$(System.DefaultWorkingDirectory)/**/*.zip'

name: '$(date:yyyyMMdd)$(rev:rr)'

        