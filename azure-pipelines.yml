name: '$(date:yyyyMMdd)$(rev:rr)'
#what branch we are watching
trigger:
  - 'master'
pr: 'none'
pool: 
  vmImage: 'ubuntu-latest'
variables:
  instructor: 'Mark'
  sdkVersion: '3.1.x'
  solutionPath: 'pipelineMvcDemo/pipelineMvcDemo.csproj'
  buildConfiguration: 'Release'

#stages group sequential actions
stages:
  - stage: 'build'
    jobs:
      - job: 'buildjob'  
        pool: 
          vmImage: 'ubuntu-latest'      
        steps:

#.NET build this downloads the correct SDK version for your build. 
        - task: UseDotNet@2
          inputs:
            packageType: 'sdk'
            version: '$(sdkVersion)'
          displayName: 'dotnet $(sdkVersion)'

#.NET Publish with arguments for the configuration
#this will build, create and store an artifact to 
#be retrieved by the deploy stage.
        - task: DotNetCoreCLI@2
          inputs:
            command: publish
            publishWebProjects: true
            arguments:
              --configuration $(buildConfiguration)
              --output $(Build.ArtifactStagingDirectory)/app
            modifyOutputPath: false
            zipAfterPublish: false
          displayName: dotnet publish

#not sure what this is. I thknk it creates the artifact to be retrieved later
#is there a template in the task manager for this?
        - publish: $(Build.ArtifactStagingDirectory)/app
          artifact: app
          displayName: artifact publish app

#       - job: test
#         pool:
#           vmImage: ubuntu-latest

#           steps:
#           - task: UseDotNet@2
#             inputs:
#               packageType: sdk
#               version: 3.1.x
#             displayName: dotnet 3.1.x
          
#           - task: SonarCloudPrepare@1
#             inputs:
#               SonarCloud: 'pipelineDemo'
#               organization: '042020-dotnet-uta'
#               scannerMode: 'MSBuild'
#               projectKey: '042020-dotnet-uta'#this name may not matter or it may need to be changed. 

#           - task: UseDotNet@2
#             inputs:
#               packageType: sdk
#               version: $(sdkVersion)
#             displayName: dotnet $(sdkVersion)

# #add the path to the test project whn it's finished.
#           - script: dotnet build
#               --configuration $(buildConfiguration)
#             workingDirectory: $(solutionPath)
#             displayName: dotnet build

# #add the path to the test project whn it's finished.
#           - script: dotnet test
#               --configuration $(buildConfiguration)
#               --logger trx
#               --no-build
#               --results-directory $(Common.TestResultsDirectory)
#               --settings coverlet.runsettings
#             workingDirectory: $(solutionPath)
#             continueOnError: true
#             displayName: dotnet test

#           - task: SonarCloudAnalyze@1
#             displayName: sonarcloud analysis run

#           - task: PublishTestResults@2
#             condition: succeededOrFailed()
#             inputs:
#               testRunner: VSTest
#               testResultsFiles: $(Common.TestResultsDirectory)/*.trx
#             displayName: test results build publish

#           - task: PublishCodeCoverageResults@1
#             condition: succeededOrFailed()
#             inputs:
#               codeCoverageTool: Cobertura
#               summaryFileLocation: $(Common.TestResultsDirectory)/*/coverage.cobertura.xml
#             displayName: code coverage build publish

#           - task: SonarCloudPublish@1
#             condition: succeededOrFailed()
#             displayName: sonarcloud results build publish


  - stage: 'deploy'
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    dependsOn: build

    jobs:
    - deployment: deploy_dev
      pool:
        vmImage: ubuntu-latest
      environment: dev
      strategy:
        runOnce:
          deploy:
            steps:
            # - download: current
            #   artifact: app
            #   displayName: artifact download app
            - task: AzureRmWebAppDeployment@4
              inputs:
                ConnectionType: 'AzureRM'
                azureSubscription: 'Azure subscription 1(5d150957-9944-40b9-b9e9-2a32c983a1f8)'
                appType: 'webApp'
                WebAppName: 'pipelineDemo11'
                packageForLinux: '$(Pipeline.Workspace)/app'
